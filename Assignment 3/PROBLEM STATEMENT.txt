===PROBLEM STATEMENT===

In this assignment you use a neural network to solve differential equations
given by vector fields in 2 dimensions.

Deadline: End of day (Midnight) Eastern Time Zone Monday Nov 1, 2021

Note: The last commit to the master branch of your repository before the
deadline is used to assess your work. (Github's timestamp is a strict deadline
for acceptance of your work).

Start with a vector field:

dx/dt = u(x, y)
dy/dt = v(x, y)

Here are a couple of examples using Python lambda functions:
--------------------------------
Example 1:
u = lambda x, y: -y/np.sqrt(x**2 + y**2)
v = lambda x, y: x/np.sqrt(x**2 + y**2)

Example 2:
u = lambda x, y: np.sin(np.pi*x) + np.sin(np.pi*y)
v = lambda x, y: np.cos(np.pi*y)
--------------------------------

You can only use the vector field to generate datasets for training your
network. For instance, you are not allowed to use an ODE solver (e.g., scipy's
odeint) in your code.

The command to run your code should be of the format in these examples:
--------------------------------
python main.py --param param/param.json -v 2 --res-path plots
--x-field "-y/np.sqrt(x**2 + y**2)" --y-field "x/np.sqrt(x**2 + y**2)"
--lb -1.0 --ub 1.0 --n-tests 3

python main.py --param param/param.json -v 2 --res-path plots
--x-field "np.sin(np.pi*x) + np.sin(np.pi*y)" --y-field "np.cos(np.pi*y)"
--lb -1.0 --ub 1.0 --n-tests 3
--------------------------------


And here is an example run of argparse --help:
--------------------------------
usage: main.py [-h] [--param param.json] [-v N] [--res-path results]
[--x-field x**2] [--y-field y**2] [--lb LB] [--ub UB] [--n-tests N_TESTS]

ODE Solver

optional arguments:
  -h, --help          show this help message and exit
  --param param.json  file name for json attributes
  -v N                verbosity (default: 1)
  --res-path results  path to save the test plots at
  --x-field x**2      expression of the x-component of the vector field
  --y-field y**2      expression of the y-component of the vector field
  --lb LB             lower bound for initial conditions
  --ub UB             upper bound for initial conditions
  --n-tests N_TESTS   number of test trajectories to plot
--------------------------------

Finally an example json file is provided in ./param folder here with some
suggested attributes. You are allowed to have more or less attributes as long
as you provide a clear documentation.


==OUTPUT FILE==

The output of your program is a plot. Example output files are provided in
./plots/ here wherein fig1.pdf and fig2.pdf are sample outputs for the first
and second example execution commands above.

After the training phase, your code will test the quality of the solutions
generated by your neural ODE solver. In these examples --n-tests is 3. This
means that your code generates 3 random initial points (x, y) where both x and y
are bounded below by --lb and bounded above by --ub values in command line. Your
code then plots the associated ODE solution from these initial conditions. It
should also mark the initial condition for clarity (as done in fig1.pdf and
fig2.pdf). Finally, on the same figure you should draw the original vector field
to provide a visual aid for the quality of your solutions.

Your code should run in reasonable amount of time (few minutes) on common
laptops. You should commit the best json parameters and output figures you have
achieved for the two vector field examples above. You may want to try your
neural ODE solver on other vector fields too. As you can see from both fig1.pdf
and fig2.pdf the approximate curves generated by your network should follow the
gradient field even if they are not accurate solutions to the ODE. For example
the exact solutions to the ODE of Example 1 are circles around the origin and
you can see that the generated trajectories are not quite circles although they
have a correct qualitative shape.

